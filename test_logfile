# file_doctor.py
import os

def find_first_bad_line(file_path, expected_columns):
    """
    Scans an entire file to find the first line that doesn't match the
    expected number of pipe delimiters. This is the ultimate diagnostic tool.
    """
    if not os.path.exists(file_path):
        print(f"--- ERROR: File not found at '{file_path}' ---")
        return

    print(f"--- Running File Doctor on: {os.path.basename(file_path)} ---")
    print(f"--- Expecting {expected_columns} columns, which means {expected_columns - 1} pipe '|' delimiters per line. ---")

    try:
        # Read the entire file's raw bytes first. This is crucial.
        with open(file_path, 'rb') as f:
            content = f.read()

        # Try to decode the byte string. Use a robust fallback.
        try:
            lines = content.decode('utf-8').splitlines()
            encoding_used = 'utf-8'
        except UnicodeDecodeError:
            print("UTF-8 decoding failed. Falling back to latin-1.")
            lines = content.decode('latin1').splitlines()
            encoding_used = 'latin1'
            
        print(f"--- File decoded using '{encoding_used}'. Scanning {len(lines)} lines... ---\n")

        # Determine the expected delimiter count from the header row.
        if not lines:
            print("--- ERROR: File is empty. ---")
            return
            
        header_line = lines[0]
        expected_delimiters = header_line.count('|')
        
        # Adjust for possible trailing delimiter
        if header_line.endswith('|'):
            expected_delimiters -=1

        print(f"Header has {expected_delimiters} delimiters. All data lines should match this.")
        
        # Scan every single data line
        for i, line in enumerate(lines[1:]):
            current_delimiters = line.count('|')
            line_number_in_file = i + 2 # +1 for 0-index, +1 for header

            # Adjust for possible trailing delimiter on the data line
            if line.endswith('|'):
                current_delimiters -= 1

            if current_delimiters != expected_delimiters:
                print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                print("!!!           PROBLEM FOUND                 !!!")
                print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n")
                print(f"Mismatch found on line number: {line_number_in_file}")
                print(f"Expected delimiter count: {expected_delimiters}")
                print(f"This line has:            {current_delimiters}\n")
                print("--- Details of Problematic Line ---")
                print(f"Line Content: {repr(line)}\n")
                print("This is the exact point of failure. The content above shows hidden characters.")
                print("Please copy this entire output and paste it in your reply.")
                return # Stop after the first error

        # If the loop completes without returning, the file is structurally sound.
        print("--- SUCCESS ---")
        print("Scanned the ENTIRE file and found NO delimiter count mismatches.")
        print("This is extremely unusual. If the record counts are still wrong, the issue might be outside the file itself (e.g., a memory issue or a very obscure library bug).")

    except Exception as e:
        print(f"--- FATAL ERROR during diagnosis: {e} ---")

if __name__ == "__main__":
    # --- Define the filenames and expected column counts ---
    files_to_check = {
        '1099MTran.dat': 15,
        '1099MTbl.dat': 7
    }

    for filename, col_count in files_to_check.items():
        find_first_bad_line(filename, col_count)
        print("\n" + "="*50 + "\n")
    
    input("\n--- Diagnosis complete. Press Enter to exit. ---")
