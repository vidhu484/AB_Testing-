# diagnose_file.py
import os

def diagnose(file_path, num_lines=20):
    """
    Reads the first few lines of a file in binary mode to diagnose its structure.
    This helps identify issues with encoding, delimiters, and line endings.
    """
    if not os.path.exists(file_path):
        print(f"--- ERROR: File not found at '{file_path}'")
        return

    print(f"--- Diagnosing file: {os.path.basename(file_path)} ---")
    print(f"--- Reading first {num_lines} lines ---\n")

    try:
        with open(file_path, 'rb') as f: # 'rb' = Read as Binary
            for i in range(num_lines):
                try:
                    raw_line_bytes = f.readline()
                    if not raw_line_bytes:
                        print("\n--- End of file reached. ---")
                        break

                    # 1. Show the raw bytes as Python sees them.
                    #    Look for \r\n (Windows), \n (Unix), or something else.
                    print(f"Line {i+1}:")
                    print(f"  Raw Bytes: {repr(raw_line_bytes)}")

                    # 2. Try to decode it as a string (using a robust encoding)
                    #    and see how many fields it splits into.
                    try:
                        # We use 'latin1' because it never fails, it just maps every byte.
                        # This helps us see what the text looks like.
                        decoded_line = raw_line_bytes.decode('latin1')
                        parts = decoded_line.strip().split('|')
                        print(f"  Split Count (using '|'): {len(parts)} parts")
                        # print(f"  Parts: {parts}") # Uncomment for very detailed view
                    except Exception as e:
                        print(f"  Could not decode or split line. Error: {e}")

                    print("-" * 20)

                except Exception as line_error:
                    print(f"Error reading line {i+1}: {line_error}")
                    break

    except Exception as e:
        print(f"--- FATAL ERROR opening or reading file: {e} ---")

if __name__ == "__main__":
    try:
        # Prompt the user for the file path
        print("Please enter the full path to the problematic .dat file (e.g., 1099MTran):")
        path = input("> ")
        diagnose(path)
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Keep the window open so the user can copy the text
        input("\n--- Diagnosis complete. Press Enter to exit. ---")
